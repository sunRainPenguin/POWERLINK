//主要在最初版本上将节点数减少为3个，并增加了CN对request的先进先出策略
//先进先出主要体现在CNAsyn（从站异步进程）和request的激活(PRequestActivate)上
enum{MN, CN};
enum{Soc, Preq, Pres, SoA, Asnd};
enum{SendToAll, PRCPresTime};
enum{unspecInvite, NMTInvite, noInvite};
	
#define MultiplexedCycle 2;
#define CNCount 3;
#define MaxRequestsCount 12;
channel Ethernet 0;
var CycleCounter = 0;

//主站：请求列表，用于调度		
var MNPR3 = [0, 0, 0, 0];			//主站任务列表
var MNPR7 = [0, 0, 0, 0];
var CNPrio = [0, 6, 5, 4];			//从站在主站调度时的优先级

var needUpdate = [0, 0, 0, 0];
var updatePR = [-1, -1, -1, -1];			//需要更新的任务优先级
var updateRS = [-1, -1, -1, -1];

var PRSend = 0;
var RSSend = 0;
var inviteTarget = -1;				//异步没有调度的话，target设为-1
var inviteType = noInvite;

//从站：请求列表信息
//初始化请求数为6个，最大请求数设置为12，requestID从1到12
var requestCount = 6;
var RequestStartTime = [-1, 1(6),-1(6)];		//每个请求的开始时间（用周期数CycleCounter来计算）	
var RequestWaitingTime = [-1, 0(6), -1(6)];		//每个请求的等待时间
var RequestCompleteTime = [-1(13)];				//每个请求的完成时间
var RequestCompleted = [0(13)];	 //请求是否完成
var CNRequestsPR3[CNCount+1][MaxRequestsCount+1] = [0(13),				
												    0, 1, 0(11), 			//CN（1）优先级为3的request队列
												    0, 2, 0(11), 			//CN（2）优先级为3的request队列
												    0, 3, 0(11)];			//CN（3）优先级为3的request队列
var CNRequestsPR7[CNCount+1][MaxRequestsCount+1] = [0(13),
												    0, 4, 0(11), 			//CN（1）优先级为7的request队列
												    0, 5, 0(11),			//CN（2）优先级为7的request队列
												    0, 6, 0(11)];			//CN（3）优先级为7的request队列
												    
var CNPR3 = [0, 1, 1, 1];			//从站请求数
var CNPR7 = [0, 1, 1, 1];		



PMN() = PMNSyn();PMNAsyn();
  

PMNSyn() = Ethernet!MN.Soc.SendToAll-> MNCycleIncrease{CycleCounter = CycleCounter+1} 		//这里为了给Request的等待时长计数，这里使用了累加的方式，并且从第一个周期开始计算
		-> Ethernet!MN.Pres.PRCPresTime
		-> MNPRC(1);
           MNPRC(2);
		   MNNormal(3);

MNPRC(i) = atomic{Ethernet?CN.i.Pres.PR.RS
		      -> UpdateOrnot(i, PR, RS)};
MNNormal(i) = Ethernet!MN.Preq.i 
		                    -> atomic{Ethernet?CN.i.Pres.PR.RS
		                    -> UpdateOrnot(i, PR, RS)};
MNMultiplexed(i) = MNNormal(i);	 
                   
//根据MN当前的list进行异步调度		   
PMNAsyn() = MNSchedule
		    {
		    var index = 1;
		    var CNPrioTemp = -1;
		    inviteTarget = -1;
		    inviteType = noInvite;
		    var hasNMTSchedule = 0;
		    var hasGenSchedule = 0;
		    while(index<=CNCount)
		    {
			    if(MNPR7[index]!=0)
			    {
			    hasNMTSchedule = 1;
			    inviteType = NMTInvite;
			    if(CNPrio[index] > CNPrioTemp)
			    {
			    CNPrioTemp = CNPrio[index];
			    inviteTarget = index;
			    }
			    }
		    index++;
		    }
		    
		    index = 1;
		    if(hasNMTSchedule==0)			//当主站的list中没有优先级为7的任务时
		    {
			    while(index<=CNCount)
			    {
			    if(MNPR3[index]!=0)		
			    {
			    hasGenSchedule = 1;			
			    inviteType = unspecInvite;
			    if(CNPrio[index] > CNPrioTemp)
			    {
			    CNPrioTemp = CNPrio[index];
			    inviteTarget = index;
			    }
			    }
			    index++;
			    }
		    }
		    }
		 ->
   		 Ethernet!MN.SoA.inviteTarget.inviteType
		 -> 
		 MNupdateMNList{
			 if(inviteTarget!=-1)
			 {
			 	if(inviteType == NMTInvite){MNPR7[inviteTarget]--}
			 	if(inviteType == unspecInvite){MNPR3[inviteTarget]--}
			 }
			 
			 var index = 1;
			 while(index <=CNCount)
			 {
				 if(needUpdate[index]==1)		//根据它是否需要更新对MN的list进行更新
				 {
				 
					 if(updatePR[index] == 3)
					 {
					 MNPR3[index]=updateRS[index];
					 if(index==inviteTarget && inviteType == unspecInvite){MNPR3[index]--} 		//这一次SoA是否调度到该请求
					 }
					 
					 if(updatePR[index] == 7)
					 {
					 MNPR7[index]=updateRS[index];
					 if(index==inviteTarget && inviteType == NMTInvite){MNPR7[index]--}
					 }
				 }
				 index++;
			 }
			 
		 }		
	  ->ifa(inviteTarget!=-1){Ethernet?CN.i.Asnd -> Skip}
	   else{Skip};
		   
PCN() = PCNSyn();PCNAsyn();    
PCNSyn() = 	Ethernet?MN.Soc.SendToAll
	     -> Ethernet?MN.Pres.PRCPresTime
	     -> CNPRC(1);
	        CNPRC(2);
	        CNNormal (3);	        
PCNAsyn() = Ethernet?MN.SoA.invitedTarget.invitedType
	     -> ifa(invitedTarget!=-1){CNAsyn(invitedTarget, invitedType)};      
	     
//PRC从站节点同步进程
CNPRC(i) = MaxPrio(i);
		    Ethernet!CN.i.Pres.PRSend.RSSend 
	     -> Skip;
	     
//Normal从站节点和Multiplexed从站节点同步进程相同
CNNormal (i) = Ethernet?MN.Preq.i 
			-> MaxPrio(i);
		       Ethernet!CN.i.Pres.PRSend.RSSend
		    -> Skip;
CNMultiplexed (i) = CNNormal (i);

//从站异步进程
CNAsyn(i, invitedType) = 
				         Ethernet!CN.i.Asnd 
				         ->
				         updateCNList{
				         if(invitedType == unspecInvite){
					         CNPR3[i]--;
					         var RequestID = CNRequestsPR3[i][1];		//队首的任务ID	
					         RequestCompleted[RequestID] = 1;			//设置任务状态
					         RequestWaitingTime[RequestID] = CycleCounter - RequestStartTime[RequestID];
					         RequestCompleteTime[RequestID] = CycleCounter;
					         CNRequestsPR3[i][1] = 0;			//对该节点的PR3队列先进先出
					         var index=0;
					         while(index<MaxRequestsCount){
					         	CNRequestsPR3[i][index] = CNRequestsPR3[i][index+1];
					         	index++;
					         }
				         	 CNRequestsPR3[i][MaxRequestsCount]=0;
				         }
				         if(invitedType == NMTInvite){
				         	 CNPR7[i]--;
				         	 var RequestID = CNRequestsPR7[i][1];			
					         RequestCompleted[RequestID] = 1;			//设置任务状态
					         RequestWaitingTime[RequestID] = CycleCounter - RequestStartTime[RequestID];
					         RequestCompleteTime[RequestID] = CycleCounter;
				         	 CNRequestsPR7[i][1] = 0;			//对该节点的PR7队列先进先出
					         var index=0;
					         while(index<MaxRequestsCount){
					         	CNRequestsPR7[i][index] = CNRequestsPR7[i][index+1];
					         	index++;
					         }
				         	 CNRequestsPR7[i][MaxRequestsCount]=0;
				         }
				         }
				         ->Skip;
         
//反馈从站的request队列中最高优先级的队列信息
MaxPrio(i) = CNfindMaxPrio
			{
			 if(CNPR7[i]!=0)
			 {
			 PRSend = 7;
			 RSSend = CNPR7[i];
			 }
			 else if(CNPR3[i]!=0)
			 {
			 PRSend = 3;
			 RSSend = CNPR3[i];
			 }
			 else
			 {
			 PRSend = 0;
			 RSSend = 0;
			 }
			 }
			 -> Skip;
			 
//根据CN传来的PR和RS判断是否需要更新MN上的list
UpdateOrnot(i, pr,rs) = MNwhetherUpdate{
			   if(pr == 3)
			   {
				   if(rs==MNPR3[i]) {needUpdate[i] = 0}
				   else {needUpdate[i] = 1; updatePR[i]=pr; updateRS[i]= rs} 
			   }
			   else if(pr == 7)
			   {
				   if(rs==MNPR7[i]) {needUpdate[i] = 0}
				   else {needUpdate[i] = 1; updatePR[i]=pr; updateRS[i]= rs}
			   }
			   else
			   {
			   		needUpdate[i] = 0; updatePR[i] = -1; updateRS[i]= -1			   		
			   }
		   }
		   ->Skip;
		   
P() = (PMN() || PCN());eoCycle->P();

//每个周期激活一个request或者不激活
//PCNRequestActivate(i) = active{
//                                requestCount++;
//	                        	RequestStartTime[requestCount] = CycleCounter;	                        	
//                         }
//                     -> ((activePR3{CNRequestsPR3[i][CNPR3[i]] = requestCount; CNPR3[i]++}->Skip)
//                     <>
//                        (activePR7{CNRequestsPR7[i][CNPR7[i]] = requestCount; CNPR7[i]++}->Skip)
//                        );
//
//PRequestActivate() = 
//            atomic{eoCycle
//                ->(if(requestCount<MaxRequestsCount){
//                     (na->Skip)
//                  <> PCNRequestActivate(1)
//                  <> PCNRequestActivate(2)
//                  <> PCNRequestActivate(3)
//                    }
//                   else{Skip}
//				  )
//				  };
//				  PRequestActivate();                   
//PRequestActivate() = 
//                atomic{eoCycle
//                ->(
//                     (a1{CNPR7[1]++}->Skip)
//                  <> (a2{CNPR7[2]++}->Skip)
//                  <> (a3{CNPR7[3]++}->Skip)
//                  <> (a4{CNPR3[1]++}->Skip)
//                  <> (a5{CNPR3[2]++}->Skip)
//                  <> (a6{CNPR3[3]++}->Skip)
//				  <> (na->Skip)k
//				  )
//				  };
//				  PRequestActivate();
//System() = P() || PRequestActivate(); 

#define success7 CNPR7[1]==0 && CNPR7[2]==0 && CNPR7[3]==0;			//高优先级的能否做完
#define success3 CNPR3[1]==0 && CNPR3[2]==0 && CNPR3[3]==0;	

//#define maintainPrio RequestCompleteTime[3]==5 && RequestCompleteTime[2]==6 && RequestCompleteTime[1]==7
//       && RequestCompleteTime[4]==2 && RequestCompleteTime[5]==3 && RequestCompleteTime[6]== 4;
#define maintainPrio RequestCompleteTime[1] < RequestCompleteTime[2] && RequestCompleteTime[2] < RequestCompleteTime[3]
                    && RequestCompleteTime[4] < RequestCompleteTime[5] && RequestCompleteTime[5] < RequestCompleteTime[6];
                    
#assert P() reaches maintainPrio;

#assert P() reaches success7;
#assert P() reaches success3;
//#assert System() reaches success7;
//#assert System() reaches success3;

#assert P() deadlockfree;

