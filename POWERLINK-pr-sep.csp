enum{MN, CN};
enum{Soc, Preq, Pres, SoA, Asnd};
enum{SendToAll, PRCPresTime1, PRCPresTime2};
enum{genericInvite, NMTInvite, noInvite};
	
#define MultiplexedCycle 2;

channel network 0;
var CycleCounter = 0;
var losePresErr =0;

var CNPR3 = [0, 1, 0, 0, 1, 0, 1];			//从站任务列表
var CNPR7 = [0, 1, 0, 1, 0, 0, 1];				

var MNPR3 = [0, 0, 0, 0, 0, 0, 0];			//主站任务列表
var MNPR7 = [0, 0, 0, 0, 0, 0, 0];
var CNPrio = [0, 6, 5, 4, 3, 2, 1];			//从站优先级

var needUpdate = [0, 0, 0, 0, 0, 0, 0];
var updatePR = [-1, -1, -1, -1, -1, -1, -1];			//需要更新的任务优先级
var updateRS = [-1, -1, -1, -1, -1, -1, -1];

var PRSend = 0;
var RSSend = 0;
var inviteTarget = -1;				//异步没有调度的话，target设为-1
var inviteType = noInvite;

PMN() = PMNSyn();PMNAsyn();PMN();
		   
PMNSyn() = network!MN.Soc.SendToAll-> MNCycleIncrease{CycleCounter = CycleCounter+1;} 
		-> network!MN.Pres.PRCPresTime1.PRCPresTime2
		-> atomic{network?CN.1.Pres.PR1.RS1
		-> UpdateOrnot(1, PR1, RS1)};
		   atomic{network?CN.2.Pres.PR2.RS2
		-> UpdateOrnot(2, PR2, RS2)};
		   network!MN.Preq.3 
		-> atomic{network?CN.3.Pres.PR3.RS3
		-> UpdateOrnot(3, PR3, RS3)};
		   network!MN.Preq.4
		-> atomic{network?CN.4.Pres.PR4.RS4
		-> UpdateOrnot(4, PR4, RS4)};
		   if(CycleCounter % MultiplexedCycle == 1)
		   {
		    network!MN.Preq.5 
		 -> network?CN.5.Pres.PR5.RS5
		 -> UpdateOrnot(5, PR5, RS5);
		    Skip
		   }
		   else
		   {
			network!MN.Preq.6
		 -> network?CN.6.Pres.PR6.RS6
		 -> UpdateOrnot(6, PR6, RS6);
		    Skip
		   }
		   ;

//根据MN当前的list进行异步调度		   
PMNAsyn() = MNSchedule
		    {
		    var index = 1;
		    var CNPrioTemp = -1;
		    inviteTarget = -1;
		    inviteType = noInvite;
		    var hasNMTSchedule = 0;
		    var hasGenSchedule = 0;
		    while(index<=6)
		    {
			    if(MNPR7[index]!=0)
			    {
			    hasNMTSchedule = 1;
			    inviteType = NMTInvite;
			    if(CNPrio[index] > CNPrioTemp)
			    {
			    CNPrioTemp = CNPrio[index];
			    inviteTarget = index;
			    }
			    }
		    index++;
		    }
		    
		    index = 1;
		    if(hasNMTSchedule==0)			//当主站的list中没有优先级为7的任务时
		    {
			    while(index<=6)
			    {
			    if(MNPR3[index]!=0)		
			    {
			    hasGenSchedule = 1;			
			    inviteType = genericInvite;
			    if(CNPrio[index] > CNPrioTemp)
			    {
			    CNPrioTemp = CNPrio[index];
			    inviteTarget = index;
			    }
			    }
			    index++;
			    }
		    }
		    }
		 ->
   		 network!SoA.inviteTarget.inviteType
		 -> 
		 MNupdateMNList{
			 if(inviteTarget!=-1)
			 {
			 	if(inviteType == NMTInvite){MNPR7[inviteTarget]--}
			 	if(inviteType == genericInvite){MNPR3[inviteTarget]--}
			 }
			 
			 var index = 1;
			 while(index <=6)
			 {
				 if(needUpdate[index]==1)		//根据它是否需要更新对MN的list进行更新
				 {
				 
					 if(updatePR[index] == 3)
					 {
					 MNPR3[index]=updateRS[index];
					 if(index==inviteTarget && inviteType == genericInvite){MNPR3[index]--} 		//这一次SoA是否调度到该请求
					 }
					 
					 if(updatePR[index] == 7)
					 {
					 MNPR7[index]=updateRS[index];
					 if(index==inviteTarget && inviteType == NMTInvite){MNPR7[index]--}
					 }
				 }
				 index++;
			 }
			 
		 }		
	  ->if(inviteTarget!=-1){network?CN.i.Asnd -> Skip};
		   
PCN() = network?MN.Soc.SendToAll
	  -> network?MN.Pres.PRCPresTime1.PRCPresTime2	
	  -> PRCSyn(1);
	     PRCSyn(2);
	     NormalMultiplexedSyn(3);
	     NormalMultiplexedSyn(4);
         (NormalMultiplexedSyn(5)[]NormalMultiplexedSyn(6));
	     network?SoA.invitedTarget.invitedType
	  ->atomic{if(invitedTarget!=-1){CNAsyn(invitedTarget, invitedType)}};
	     PCN();
		 

//PRC从站节点同步进程
PRCSyn(i) = MaxPrio(i);
		    network!CN.i.Pres.PRSend.RSSend 
	     -> Skip();
	     
//Normal从站节点和Multiplexed从站节点同步进程
NormalMultiplexedSyn(i) = network?MN.Preq.i 
			-> MaxPrio(i);
		       network!CN.i.Pres.PRSend.RSSend
		    -> Skip;

//从站异步进程
CNAsyn(i, invitedType) = 
				         network!CN.i.Asnd 
				         ->
				         updateCNList{
				         if(invitedType == genericInvite){CNPR3[i]--}
				         if(invitedType == NMTInvite){CNPR7[i]--}
				         }
				         ->Skip;
         

MaxPrio(i) = CNfindMaxPrio
			{
			 if(CNPR7[i]!=0)
			 {
			 PRSend = 7;
			 RSSend = CNPR7[i];
			 }
			 else if(CNPR3[i]!=0)
			 {
			 PRSend = 3;
			 RSSend = CNPR3[i];
			 }
			 else
			 {
			 PRSend = 0;
			 RSSend = 0;
			 }
			 }
			 -> Skip;
			 
//根据CN传来的PR和RS判断是否需要更新MN上的list
UpdateOrnot(i, pr,rs) = MNwhetherUpdate{
			   if(pr == 3)
			   {
				   if(rs==MNPR3[i]) {needUpdate[i] = 0}
				   else {needUpdate[i] = 1; updatePR[i]=pr; updateRS[i]= rs} 
			   }
			   else if(pr == 7)
			   {
				   if(rs==MNPR7[i]) {needUpdate[i] = 0}
				   else {needUpdate[i] = 1; updatePR[i]=pr; updateRS[i]= rs}
			   }
			   else
			   {
			   		needUpdate[i] = 0; updatePR[i] = -1; updateRS[i]= -1			   		
			   }
		   }
		   ->Skip;
		   
P() = PMN() || PCN();

#define success7 CNPR7[1]==0 && CNPR7[2]==0 && CNPR7[3]==0 && CNPR7[4]==0 && CNPR7[5]==0 && CNPR7[6]==0;			//高优先级的能否做完
#define success3 CNPR3[1]==0 && CNPR3[2]==0 && CNPR3[3]==0 && CNPR3[4]==0 && CNPR3[5]==0 && CNPR3[6]==0;	

//CNPR7[2]=0 && CNPR7[3]=0 && CNPR7[4]=0 && CNPR7[5]=0 && CNPR7[6]=0;
#assert P() reaches success7;
#assert P() reaches success3;

